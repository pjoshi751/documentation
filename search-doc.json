[{"title":"Hello","type":0,"sectionRef":"#","url":"blog/hello-world","content":"Welcome to this blog. This blog is created with Docusaurus 2 alpha.This is a test post.A whole bunch of other information."},{"title":"Hola","type":0,"sectionRef":"#","url":"blog/hola","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well!Delete the whole directory if you don't want the blog features. As simple as that!"},{"title":"ABIS","type":0,"sectionRef":"#","url":"docs/abis","content":""},{"title":"Overview","type":1,"pageTitle":"ABIS","url":"docs/abis#overview","content":"Providing unique identity for a resident is one of key features of any identity platform. To achieve this, MOSIP interfaces with an Automated Biometric Identification System (ABIS) to perform de-duplication of a resident's biometric data.  MOSIP is designed to integrate with multiple ABISs to leverage expertise of different ABIS providers. A country may use one ABIS for fingerprint and another for Iris or use multiple ABISs for the same biometric data and evaluate the best ABIS based on de-duplication quality.  The ABIS system never comes to know about resident's identity. Any Personally Idenfiable Information (PII) such as demographic details or RID (Request ID for Registration) is not shared with the ABIS system. Internally, MOSIP maintains a mapping between the ABIS specific referenceID and RID of the resident. noteABIS is used for 1:N deduplication. For 1:1 authentication Biometric SDK is used. MOSIP does not recommend using an ABIS for 1:1 authentication. cautionDo not use ABIS for 1:1 Auth  "},{"title":"ABIS middleware","type":1,"pageTitle":"ABIS","url":"docs/abis#abis-middleware","content":"MOSIP's ABIS middleware has the following components MOSIP ABIS request handler Request router (based on routing policy, an ABIS request is routed to the correct ABIS system)ABIS response handler  "},{"title":"MOSIP-ABIS interface","type":1,"pageTitle":"ABIS","url":"docs/abis#mosip-abis-interface","content":"MOSIP interacts with ABIS only via message queues. JSON format is used for all control messages in the queue. MOSIP ABIS middleware sends requests to inbound queue address and receives responses from outbound queue address. For details refer to the ABIS API Specifications. ABIS must support the following types of biometric images: Individual fingerprint images (segmented)Iris images (left, right)Face image Biometrics data in MOSIP is exchanged as per formats defined in Biometric Data Specification.  "},{"title":"ABIS deployment","type":1,"pageTitle":"ABIS","url":"docs/abis#abis-deployment","content":"ABIS must comply to ABIS API Specifications.The queques can be configured in RegistrationProcessorAbis-env.json file. ABIS system connects to the queues using a pre-defined user id and password. It is recommended that ABIS is deployed in the same secure zone (military zone) where the registration processor is deployed. ABIS system is not recommended to connect to any external network. "},{"title":"Architecture","type":0,"sectionRef":"#","url":"docs/architecture","content":""},{"title":"Architecture Principles","type":1,"pageTitle":"Architecture","url":"docs/architecture#architecture-principles","content":"Architecture Principles "},{"title":"Functional Architecture","type":1,"pageTitle":"Architecture","url":"docs/architecture#functional-architecture","content":" "},{"title":"Logical Architecture","type":1,"pageTitle":"Architecture","url":"docs/architecture#logical-architecture","content":" "},{"title":"Data Architecture","type":1,"pageTitle":"Architecture","url":"docs/architecture#data-architecture","content":"Data Architecture "},{"title":"Design choices","type":1,"pageTitle":"Architecture","url":"docs/architecture#design-choices","content":"Microservice based architecture for all platform services for modularity and scalability.Staged Event Driven Architecture (SEDA) for processing Registration data for extensibility.Thick client architecture for Registration client "},{"title":"Architectural Principles","type":0,"sectionRef":"#","url":"docs/archp","content":""},{"title":"Architectural Principles","type":1,"pageTitle":"Architectural Principles","url":"docs/archp#architectural-principles","content":"MOSIP is built on the following architecture principles MOSIP must follow platform based approach so that all common features are abstracted as reusable components and frameworks into a common layerMOSIP must follow API first approach and expose the business functions as RESTful servicesMOSIP must not use proprietary or commercial license frameworks. Where deemed essential, such components must be encapsulated to enable their replacement if necessary (to avoid vendor lock-in)MOSIP must use open standards to expose it’s functionality (to avoid technology lock-in)Each MOSIP component must be independently scalable (scale out) to meet varying load requirementsMOSIP must use commodity computing hardware & software to build the platformData must be encrypted in-flight and at-rest. All requests must be authenticated and authorized. Privacy of Identity Data is an absolute must in MOSIPMOSIP must follow the following manageability principles – Auditability & monitor ability of every event in the system, testability of every feature of the platform & easy upgrade ability of the platformMOSIP must follow the principles of Zero-Knowledge which means that the services know nothing about the PII dat stored.MOSIP components must be loosely coupled so that they can be composed to build the identity solution as per the requirements of a countryMOSIP must support i18n capabilityAll modules of MOSIP should be resilient such that the solution as a whole is fault tolerantThe key sub-systems of MOSIP should be designed for extensibility. For example, if an external system has to be integrated for fingerprint data, it should be easy to do so The key design aspects considered for MOSIP are "},{"title":"Ecosystem approach","type":1,"pageTitle":"Architectural Principles","url":"docs/archp#ecosystem-approach","content":"MOSIP on its own will not be able to meet the end-to-end requirements of a country. Devices and ABIS providers are key to process an individual's data and prove uniqueness. MOSIP should be able to integrate with devices and ABIS that conform to the standards to achieve the stated goals. MOSIP should also be able to cater to a diverse set of institutions wanting to authenticate an Individual against the data stored in MOSIP. So, key parameters are All public/external facing interfaces of MOSIP must be standards-based for interoperability "},{"title":"Configurability","type":1,"pageTitle":"Architectural Principles","url":"docs/archp#configurability","content":"MOSIP should be flexible for countries to configure the base platform according to their specific requirements. Some of the examples of configurability are Country should be able to choose the features required. For example, it must be possible for a country to turn off Finger Print captureCountry should be able to configure the attributes of an ID ObjectCountry should be able to define the length of the UIN number "},{"title":"Extensibility","type":1,"pageTitle":"Architectural Principles","url":"docs/archp#extensibility","content":"MOSIP should be flexible to extend functionality on top of the basic platform. Some of the examples of extensibility are A country should be able to introduce a new step in processing dataIntegrate MOSIP with other ID systems and include it as part of the MOSIP data processing flow "},{"title":"Modularity","type":1,"pageTitle":"Architectural Principles","url":"docs/archp#modularity","content":"All components in MOSIP should be modular and their features exposed via interfaces such that the implementation behind the interface can be changed without affecting other modules. Some examples of modularity are UIN generator algorithm provided by the platform can be replaced by a country with their own implementationThe default demographic deduplication algorithm provided by MOSIP can be changed to a different one without impacting the process flow "},{"title":"MOSIP","type":0,"sectionRef":"#","url":"docs/home","content":"The Modular Open Source Identity Platform (MOSIP) helps Governments and other user organizations implement a digital, foundational identity system. Nations can use MOSIP freely as a core to build their own identity systems. Being modular in its architecture, MOSIP provides flexibility to countries in how they implement and configure their systems, and helps avoid vendor lock-in. Anchored at the International Institute of Information Technology, Bangalore (IIIT-B), MOSIP harnesses the power of open source and embraces the best practices of scalability, security and privacy.MOSIP provides the following basic functions:acquire an individual's identity dataprocess the identity data to establish uniquenessgenerate a Unique Identity Number (UIN)authenticate an individual's identity where required to provide access to services such as healthcare, education, social security etc. The key objectives of the MOSIP Platform are toprovide basic framework to create a fully functional foundational identity systemprovide flexibility for a country to choose and customize the features from the basic framework according to their requirementsmaintain privacy, security and confidentiality of an individual's dataprovide a scalable and accessible solution to cater to a wide range of population (a few thousands to tens of millions)"}]